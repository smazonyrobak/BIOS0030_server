## Docker Commands for Building and Running `cfe-jupyter` Image

### 1. Build the Docker Image
```bash
docker build -t cfe-jupyter -f conf/Dockerfile .docke
```
This command builds a Docker image named `cfe-jupyter` from a Dockerfile located in the `conf` directory.
Run this from the root directory of your project.

### 2. List the Dockerfile to Confirm its Presence
```bash
ls -l Dockerfile
```
This command lists the details of the Dockerfile in the current directory to ensure it exists before
attempting to build the Docker image. Execute this in the directory where your Dockerfile resides.

### 3. Make the Run Script Executable
```bash
chmod +x scripts/d_run.sh
```
Before running the `d_run.sh` script, ensure it is executable. This command changes the script's
permissions to allow execution.

### 4. Run the Docker Container Using the Custom Script
```bash
./scripts/d_run.sh
```
Execute this script to run your Docker container. The script should contain the docker run command
with appropriate configurations.

### 5. Run the Docker Container Interactively
```bash
docker run -it cfe-jupyter /bin/bash
```
Use this command to start the `cfe-jupyter` Docker container in interactive mode with a bash shell.
It's useful for exploring the container or executing commands manually.

### 6. View Docker Images
```bash
docker images
```
List all Docker images on your system to view the `cfe-jupyter` image along with any others.

### 7. Clean Up Unwanted Docker Images and Containers
```bash
docker system prune -a
```
Removes unused Docker images and containers. Use with caution, as this will delete all stopped
containers, unused networks, dangling images, and build caches.

###8 Stop a container
docker stop d98bccd37a96

### 9. Remove unwanted container
docker rm d98bccd37a96

### 10. Remove unwanted image
docker rmi -f cfe-jupyter:latest
removing images

###11. stopping all containers
docker stop $(docker ps -aq)



######################From building docker image to running the server on Heroku########################
1. heroku login
2. heroku container:login
3. docker build --platform linux/amd64 -t bios0030-cogniapp -f conf/Dockerfile .
4. docker run --env PORT=8888 -p 8888:8888 bios0030-cogniapp
5. docker tag bios0030-cogniapp registry.heroku.com/bios0030-cogniapp/web
6. docker push registry.heroku.com/bios0030-cogniapp/web
7. heroku container:release web -a bios0030-cogniapp
8. heroku open -a bios0030-cogniapp



